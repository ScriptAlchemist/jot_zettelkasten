# Reacting to Input with State

React uses a declarative way to manipulate the UI. Instead of manipulating individual pieces of the UI directly, you describe the different states that your component can be in, and switch between them in response to the user input. This is similar to how designers think about the UI.

> #### You will learn
>
> * How declarative UI programming differs from imperative UI programming
> * How to enumerate the different visual states your component can be in
> * How to trigger the changes between the different visual state from code

## How declarative UI compares to imperative

When you design UI interactions, you probably think about how the UI changes in response to user actions. Consider a form that lets the user submit an answer:

* When you type something into a form, the "Submit" button becomes enabled.
* When you press "Submit", both form and the button become disabled, and a spinner appears.
* If the network request succeeds, the form gets hidden, and the "Thank You" message appears.
* If the network request fails, an error message appears, and the form becomes enabled again.


